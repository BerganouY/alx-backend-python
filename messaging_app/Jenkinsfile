pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        GITHUB_CREDENTIALS = credentials('github-credentials')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python environment...'
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing project dependencies...'
                sh '''
                    . venv/bin/activate
                    pip install pytest pytest-django pytest-cov
                    pip install flake8
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                sh '''
                    . venv/bin/activate
                    cd messaging_app
                    export DJANGO_SETTINGS_MODULE=messaging_app.settings
                    python manage.py test --verbosity=2
                    pytest --junitxml=test-results.xml --cov=. --cov-report=xml
                '''
            }
            post {
                always {
                    // Archive test results
                    junit 'messaging_app/test-results.xml'

                    // Publish coverage reports
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'messaging_app',
                        reportFiles: 'coverage.xml',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                echo 'Running flake8 linting...'
                sh '''
                    . venv/bin/activate
                    cd messaging_app
                    flake8 . --max-line-length=88 --exclude=migrations,venv,__pycache__
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    def image = docker.build("${env.DOCKER_HUB_CREDENTIALS_USR}/messaging-app:${env.BUILD_NUMBER}")
                    def latestImage = docker.build("${env.DOCKER_HUB_CREDENTIALS_USR}/messaging-app:latest")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        def image = docker.image("${env.DOCKER_HUB_CREDENTIALS_USR}/messaging-app:${env.BUILD_NUMBER}")
                        def latestImage = docker.image("${env.DOCKER_HUB_CREDENTIALS_USR}/messaging-app:latest")

                        image.push()
                        latestImage.push()
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}