name: Build and Deploy Docker Image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  IMAGE_NAME: messaging-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./messaging_app
        file: ./messaging_app/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run security scan
      uses: docker/scout-action@v1
      if: ${{ github.event_name != 'pull_request_target' }}
      with:
        command: cves
        image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        only-severities: critical,high
        exit-code: false

    - name: Update deployment status
      if: success()
      run: |
        echo "‚úÖ Docker image successfully built and pushed!"
        echo "üê≥ Image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è Tags: ${{ steps.meta.outputs.tags }}"

  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "üéâ Build and deployment completed successfully!"
        else
          echo "‚ùå Build or deployment failed. Check the logs for details."
        fi