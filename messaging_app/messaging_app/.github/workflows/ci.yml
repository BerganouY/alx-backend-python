name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_messaging_db
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov
        pip install flake8

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"rootpassword" --silent; do
          sleep 1
        done

    - name: Set up Django settings
      run: |
        cd messaging_app
        export DJANGO_SETTINGS_MODULE=messaging_app.settings
        export DATABASE_URL=mysql://testuser:testpassword@127.0.0.1:3306/test_messaging_db

    - name: Run Django migrations
      run: |
        cd messaging_app
        python manage.py migrate --settings=messaging_app.settings
      env:
        DATABASE_URL: mysql://testuser:testpassword@127.0.0.1:3306/test_messaging_db

    - name: Run Tests
      run: |
        cd messaging_app
        python manage.py test --verbosity=2
        pytest --junitxml=test-results.xml --cov=. --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: mysql://testuser:testpassword@127.0.0.1:3306/test_messaging_db

    - name: Run Linting (flake8)
      run: |
        cd messaging_app
        flake8 . --max-line-length=88 --exclude=migrations,venv,__pycache__,settings.py --exit-zero

    - name: Generate Coverage Report
      run: |
        cd messaging_app
        coverage report --show-missing

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          messaging_app/coverage.xml
          messaging_app/htmlcov/
          messaging_app/test-results.xml

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: messaging_app/test-results.xml

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Run flake8 linting
      run: |
        cd messaging_app
        flake8 . --max-line-length=88 --exclude=migrations,venv,__pycache__,settings.py

    - name: Check for linting errors
      run: |
        cd messaging_app
        if flake8 . --max-line-length=88 --exclude=migrations,venv,__pycache__,settings.py --count --exit-zero; then
          echo "Linting passed!"
        else
          echo "Linting failed - build will fail"
          exit 1
        fi